{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","row","col","isStart","isEnd","isVisited","isWall","isShortestPath","handleMouseDown","handleMouseEnter","handleMouseUp","specialNodeClass","className","onMouseDown","onMouseEnter","onMouseUp","e","dijkstra","grid","startNode","endNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","START_NODE","END_NODE","defaultState","hardcopyGrid","gridCopy","JSON","parse","stringify","getInitialGrid","currentRow","createNode","getNewGridWallToggled","newGrid","slice","newNode","PathfindingVisualizer","useState","updateGrid","mouseIsPressed","updateMouse","useEffect","animateShortestPath","nodesInShortestPathOrder","i","setTimeout","onClick","animateDijkstra","currentNode","unshift","getNodesInShortestPathOrder","map","rowIdx","key","nodeIdx","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9a458674.chunk.js","sourcesContent":["import React from 'react'\n\nimport './Node.css'\n\nconst Node = props => {\n  const { row, col, isStart, isEnd, isVisited, isWall, isShortestPath ,handleMouseDown, handleMouseEnter, handleMouseUp } = props\n\n  const specialNodeClass = isEnd ? 'node-end' : isStart ? 'node-start' : isShortestPath ? 'node-shortest-path' : isVisited ? 'node-visited' : isWall ? 'node-wall' : ''\n\n  return (\n    <div \n      className={`node ${specialNodeClass}`}\n      onMouseDown={() => handleMouseDown(row, col)}\n      onMouseEnter={() => handleMouseEnter(row, col)}\n      onMouseUp={e => handleMouseUp()}\n    >\n    </div>\n  )\n}\n\nexport default Node","export function dijkstra(grid, startNode, endNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === endNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {col, row} = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// called after finishing dijstra's algorithm\nexport function getNodesInShortestPathOrder(endNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = endNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}","import React, { useState, useEffect, Fragment } from 'react'\n\nimport './PathfindingVisualizer.css'\nimport Node from './Node/Node'\n\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra'\n\nconst START_NODE = {\n  row: 10,\n  col: 15\n}\n\nconst END_NODE = {\n  row: 10,\n  col: 35\n}\n\nconst defaultState = {\n  grid: [],\n  mouseIsPressed: false\n}\n\nconst PathfindingVisualizer = () => {\n  const [grid, updateGrid] = useState(defaultState.grid)\n  const [mouseIsPressed, updateMouse] = useState(defaultState.mouseIsPressed)\n  // componentDidMount\n  useEffect(() => {\n    updateGrid(getInitialGrid())\n  }, [])\n  \n  const animateDijkstra = (visitedNodesInOrder, nodesInShortestPathOrder) => {\n    for(let i = 0; i <= visitedNodesInOrder.length; i++){\n      if(i === visitedNodesInOrder.length){\n        setTimeout(() => {\n          animateShortestPath(nodesInShortestPathOrder)\n        }, 50 * i)\n          return\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i]\n        const newGrid = grid.slice() // getting a copy of the entire grid\n        const newNode = {\n          ...node,\n          isVisited: true\n        }\n        newGrid[node.row][node.col] = newNode\n       \n        updateGrid(newGrid)\n      }, 50 * i)\n    }\n  }\n\n  const animateShortestPath = nodesInShortestPathOrder => {\n    for(let i = 0; i < nodesInShortestPathOrder.length; i++){\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i]\n        node.isShortestPath = true\n        const gridCopy = grid.slice()\n        gridCopy[node.row][node.col] = node\n        updateGrid(gridCopy)\n      }, 50 * i)\n    }\n  }\n\n  const visualizeDijkstra = () => {\n    const gridCopy = hardcopyGrid(grid)\n    const startNode = gridCopy[START_NODE.row][START_NODE.col]\n    const endNode = gridCopy[END_NODE.row][END_NODE.col]\n    const visitedNodesInOrder = dijkstra(gridCopy, startNode, endNode)\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(endNode)\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder)\n  }\n\n  // handles the initial mouse down and setting state to true so continually hovering over nodes with mouse pressed will make 'walls'\n  const handleMouseDown = (row, col) => {\n    const newGrid = getNewGridWallToggled(grid, row, col)\n    updateGrid(newGrid)\n    updateMouse(true)\n  }\n  \n  const handleMouseEnter = (row, col) => {\n    if(!mouseIsPressed) return // breakout of function if mouse is not pressed\n    const newGrid = getNewGridWallToggled(grid, row, col)\n    updateGrid(newGrid)\n  }\n  \n  const handleMouseUp = () => {\n    updateMouse(false)\n  }\n\n  return (\n    <Fragment>\n      <button onClick={visualizeDijkstra}>\n        Visualize Dijkstra's Algorithm\n      </button>\n      <div className='grid'>\n        { grid.map((row, rowIdx) => {\n          return (\n            <div key={rowIdx}>\n              {row.map((node, nodeIdx) => {\n                const { isStart, isEnd, isVisited, isShortestPath, isWall } = node\n                return (\n                  <Node \n                    key={nodeIdx} \n                    isStart={isStart} \n                    isEnd={isEnd} \n                    isVisited={isVisited}  \n                    isWall={isWall}\n                    isShortestPath={isShortestPath}\n                    handleMouseDown={handleMouseDown} \n                    handleMouseEnter={handleMouseEnter} \n                    handleMouseUp={handleMouseUp}\n                    row={rowIdx}\n                    col={nodeIdx}\n                  />\n                )\n              })}\n            </div>\n          )\n        })}\n      </div>\n    </Fragment>\n  )\n}\n\nconst hardcopyGrid = grid => {\n  const gridCopy = JSON.parse(JSON.stringify(grid)) // need to do a hardcopy of the state so we don't modify the nodes dijkstra's is still running\n  for(let row = 0; row < gridCopy.length; row++){\n    for(let col = 0; col < gridCopy[row].length; col++){\n      gridCopy[row][col].distance = Infinity // Infinity gets set to null when you stringify and then parse it\n    }\n  }\n  return gridCopy\n}\n\nconst getInitialGrid = () => {\n  const nodes = []\n  for(let row = 0; row < 15; row++){\n    const currentRow = []\n    for(let col = 0; col < 50; col++){\n      currentRow.push(createNode(row, col))\n    }\n    nodes.push(currentRow)\n  }\n  return nodes\n}\n\nconst createNode = (row, col) => {\n  return {\n    row, \n    col,\n    isStart: row === START_NODE.row && col === START_NODE.col, \n    isEnd: row === END_NODE.row && col === END_NODE.col,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    isShortestPath: false,\n    previousNode: null\n  }\n}\n\nconst getNewGridWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice()\n  const node = newGrid[row][col]\n  const newNode = {\n    ...node,\n    isWall: !node.isWall\n  }\n  newGrid[row][col] = newNode\n  return newGrid\n}\n\n\nexport default PathfindingVisualizer","import React from 'react'\n\n\nimport './App.css'\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}